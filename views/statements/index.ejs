<% layout('layouts/boilerplate') %>


<div class="container-fluid col-9 mx-auto mt-5 mb-5">
  <h1><b>OECD Cases</b></h1>

  <h3>Please scroll down and use the search box and/or filters below to find a specific Statement.</h3>
  <div class="mt-5" id="map" style="height: 480px"></div>
  <div class="mt-5 ">

    <div class="mb-5">
      <form action="/statements/search" method="GET">
        <label class="form-label fw-bold" hidden for="searchTerm">Search</label>
        <div class=" d-flex flex-row flex-wrap mb-3">
          <div class="col-11 me-auto">

            <input class="form-control" id="searchTerm" type="text" name="searchTerm" placeholder="Search...">
          </div>
          <button class="btn btn-dark-blue" type="submit">Search</button>
        </div>
        <div class="card" id="filters-container">
          <button class="btn bg-primary-subtle btn-hide-filters" type="button" data-bs-toggle="collapse" data-bs-target="#collapsedFilters" aria-expanded="false" aria-controls="collapseExample">
            Show/Hide Filters
          </button>
          <div class="collapse " id="collapsedFilters">
            <div class="d-flex flex-row flex-wrap">

              <% for (filter in filters) { %>
              <select id="select-<%= filter %>" name="selectedFilters[<%= filter%>]" multiple data-placeholder="<%= filters[filter].filterName%>" class="select form-select-sm col-6 p-2">
                <% for (subfilter of filters[filter].subfilters) { %>
                <option value="<%=subfilter %>">
                  <%= subfilter %>
                </option>

                <% } %>
              </select>
              <% } %>

            </div>
          </div>
        </div>
      </form>
    </div>

    <div class="d-flex flex-row flex-wrap" id="entriesContainer">

    </div>
    <div></div>
    <nav class="mt-3" aria-label="page-navigation" id="paginationContainer">
      <ul class="pagination">
        <li class="page-item disabled">
          <span class="page-link">Previous</span>
        </li>
        <li class="page-item"><a class="page-link" href="#paginationContainer">1</a></li>
        <li class="page-item active" aria-current="page">
          <span class="page-link">2</span>
        </li>
        <li class="page-item"><a class="page-link" href="#paginationContainer">3</a></li>
        <li class="page-item">
          <a class="page-link" href="#paginationContainer">Next</a>
        </li>
      </ul>
    </nav>
  </div>

  <script>
    const entriesPerPage = 4; // Number of entries to display per page
    let currentPage = 1; // Current page number

    const statements = <%- JSON.stringify(statements) %>; // Array of statements
    // console.log(statements);
    const countryCount = <%- JSON.stringify(countryCount) %>;
    const data = <%- JSON.stringify(data) %>; // Array of countryCount
    // console.log(countryCount);
    // Function to display the entries for the current page
    function displayEntries() {
      const entriesContainer = document.getElementById('entriesContainer');
      entriesContainer.innerHTML = ''; // Clear previous entries

      // Calculate the starting and ending indexes for the current page
      const start = (currentPage - 1) * entriesPerPage;
      const end = start + entriesPerPage;

      // Display entries for the current page
      for (let i = start; i < end && i < statements.length; i++) {
        const statement = statements[i];

        // Create DOM elements to display the statement's content
        const statementElement = document.createElement('a');
        statementElement.href = `/statements/${statement._id}`;
        statementElement.classList.add('link-container', 'col-10');
        statementElement.innerHTML = `
              <div class="card mt-3">
                <div class="card-header"></div>
                <div class="card-body">
                  <h5 class="card-title">${statement.title}</h5>
                  <p class="issue-tag">ISSUE</p>
                  <p class="card-text"><i>${statement.description}</i></p>
                </div>
              </div>
            `;

        entriesContainer.appendChild(statementElement);
      }
    }

    // Function to handle pagination button clicks
    function handlePaginationClick(page) {
      if (page === 'Previous') {
        if (currentPage > 1) {
          currentPage--;
        }
      } else if (page === 'Next') {
        if (currentPage < Math.ceil(statements.length / entriesPerPage)) {
          currentPage++;
        }
      } else {
        currentPage = page;
      }

      displayEntries();
      updatePagination();
    }

    // Function to create a pagination button
    function createPaginationButton(label, isCurrentPage) {
      const listItem = document.createElement('li');
      listItem.classList.add('page-item');
      if (isCurrentPage) {
        listItem.classList.add('active');
        listItem.setAttribute('aria-current', 'page');
      }

      const link = document.createElement('a');
      link.classList.add('page-link');
      link.href = `#paginationContainer`;
      link.textContent = label;
      link.addEventListener('click', () => {
        handlePaginationClick(label);
      });

      if (label === 'Previous' && currentPage === 1) {
        listItem.classList.add('disabled');
        link.removeAttribute('href');
      }

      const totalPages = Math.ceil(statements.length / entriesPerPage);
      if (label === 'Next' && currentPage === totalPages) {
        listItem.classList.add('disabled');
        link.removeAttribute('href');
      }

      listItem.appendChild(link);
      return listItem;
    }

    // Function to update the pagination buttons
    function updatePagination() {
      const paginationContainer = document.getElementById('paginationContainer');
      paginationContainer.innerHTML = ''; // Clear the existing pagination buttons

      const paginationList = document.createElement('ul');
      paginationList.classList.add('pagination');

      // Add "Previous" button
      const previousButton = createPaginationButton('Previous', currentPage === 1);
      paginationList.appendChild(previousButton);

      // Add page buttons
      for (let i = 1; i <= Math.ceil(statements.length / entriesPerPage); i++) {
        const pageButton = createPaginationButton(i, i === currentPage);
        paginationList.appendChild(pageButton);
      }

      // Add "Next" button
      const nextButton = createPaginationButton('Next', currentPage === Math.ceil(statements.length / entriesPerPage));
      paginationList.appendChild(nextButton);

      paginationContainer.appendChild(paginationList);
    }

    // Initial display of entries and pagination buttons
    displayEntries();
    updatePagination();
  </script>